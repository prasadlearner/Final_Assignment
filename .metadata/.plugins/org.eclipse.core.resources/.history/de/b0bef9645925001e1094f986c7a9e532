package in.ineuron.dao;

import org.hibernate.Session;
import org.hibernate.Transaction;

import in.ineuron.model.Student;
import in.ineuron.util.HibernateUtil;

public class StudentDaoImpl implements IStudentDao {
	Session session = HibernateUtil.getSession();

	@Override
	public Student searchStudent(Integer sid) {
		return session.get(Student.class, sid);
	}

	@SuppressWarnings("finally")
	@Override
	public String updateStudent(Student student) {
		System.out.println(student);

		Transaction transaction = null;
		Boolean flag = false;
		try {
			transaction = session.beginTransaction();
			session.merge(student);
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (flag) {
				transaction.commit();
				return "success";
			} else {
				transaction.rollback();
				return "failure";
			}
		}
	}

}
 23 changes: 23 additions & 0 deletions23  
Question20/src/in/ineuron/daofactory/StudentDaoFactory.java
@@ -0,0 +1,23 @@
package in.ineuron.daofactory;

import in.ineuron.dao.IStudentDao;
import in.ineuron.dao.StudentDaoImpl;

//Abstraction logic of implementation
public class StudentDaoFactory {

	//make constructor private to avoid object creation 
	private StudentDaoFactory() {} 

	private static IStudentDao studentDao = null;

	public static IStudentDao getStudentDao() {

		//singleton pattern code
		if(studentDao == null) {
			studentDao = new StudentDaoImpl();
		}
		return studentDao;
	}

}